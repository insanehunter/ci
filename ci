#!/bin/sh
set -e

VERSION=0.0.6
CONFIG="$HOME/.config/ci"
CI_FILE="./.ci"

# TODO:
# .ci and ci init - local configuration file with jenkins url, job name and params
# automatic branch detection
# checking if branch was not pushed or has local changes
#

# Defining colors.
if [ -t 1 ]; then
    NCOLORS=`tput colors`

    if [ -n "$NCOLORS" ] && [ $NCOLORS -ge 8 ]; then
        NORMAL=`tput sgr0`
        RED=`tput setaf 1`
        GREEN=`tput setaf 2`
        YELLOW=`tput setaf 3`
        BLUE=`tput setaf 4`
        BOLD=`tput bold`
        UNDERLINE=`tput smul`
    fi
fi

function usage() {
    echo "ci $VERSION"
    echo "Usage:"
    echo "    ci [-f] JOB_NAME [PARAM=VALUE] - builds job with optional parameters"
    echo
    echo "    Flags:"
    echo "        -f: force build even if current branch has unpushed commits"
    echo
}

function run() {
    FORCE=0
    if [ "$1" = "-f" ]; then
        FORCE=1
        shift 1
    fi

    if [ -f $CI_FILE ]; then
        echo 'Using .ci file.\n'

        BRANCH=`git symbolic-ref --short HEAD`
        UPSTREAM=`git for-each-ref --format="%(upstream)" "refs/heads/$BRANCH"`

        if [ $FORCE -ne 1 ] && ([ -z "$UPSTREAM" ] || [ ! -z "$(git cherry -v)" ]); then
            echo "${YELLOW}Refusing to build: local branch "$BRANCH" has unpushed commits${NORMAL}"
            exit 1
        fi

        read -a ARGS < $CI_FILE
        set -- `eval echo ${ARGS[@]}`
    fi

    if [ $# -lt 1 ]; then
        usage
        return
    fi
    source $CONFIG

    JOB_NAME=$1
    shift 1

    PARAMS=""
    HUMAN_PARAMS="\n"
    for arg in $@; do
        NAME=${arg%=*}
        VALUE=${arg##*=}
        if [ -z "$VALUE" ]; then
            echo "${RED}Error: no value provided for parameter $NAME${NORMAL}"
            exit 1
        fi
        if [ "$PARAMS" ]; then
            PARAMS+=","
        fi
        PARAMS+="{\"name\":\"$NAME\", \"value\":\"$VALUE\"}"
        HUMAN_PARAMS+="    ${BOLD}$NAME${NORMAL}=$VALUE\n"
    done
    echo "Building ${BOLD}$JOB_NAME${NORMAL}: $HUMAN_PARAMS"

    JENKINS_CRUMB=$(curl -s --user $JENKINS_CREDENTIALS "$JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)")
    RESULT_FILE=`mktemp`
    curl -s -X POST $JENKINS_URL/job/$JOB_NAME/build --user $JENKINS_CREDENTIALS \
                   --data-urlencode json="{\"parameter\": [$PARAMS]}" -H $JENKINS_CRUMB > $RESULT_FILE
    if [ ! -z "$(cat $RESULT_FILE)" ]; then
        ERROR=`cat $RESULT_FILE | pup 'pre text{}' | head -n1 | sed 's/[a-zA-Z.]*: //; s/ *\(.*\) */\1/'`
        echo "${RED}FAIL${NORMAL}: ${RED}$ERROR${NORMAL}"
        rm $RESULT_FILE
        exit 1
    fi
    rm $RESULT_FILE

    trap ctrl_c INT
    function ctrl_c() {
        echo "** Stopping job"
        curl -s -X POST $JENKINS_URL/job/$JOB_NAME/lastBuild/stop --user $JENKINS_CREDENTIALS \
                -H $JENKINS_CRUMB
        echo "${RED}CANCELLED${NORMAL}"
    }

    RESULT="null"
    while [ "$RESULT" = "null" ]; do
        sleep 1
        LOG=`curl -s $JENKINS_URL/job/$JOB_NAME/lastBuild/api/json --user $JENKINS_CREDENTIALS \
                  -H $JENKINS_CRUMB`
        RESULT=`echo $LOG | tr -d '\n' | jq -r '.result'`
        printf "."
    done
    if [ "$RESULT" != "SUCCESS" ]; then
        echo "${RED}$RESULT${NORMAL}"
        URL=$(echo $LOG | tr -d '\n' | jq -r '.url')
        if [ ! -z "$URL" ]; then
            echo "More info here: ${BLUE}${UNDERLINE}${URL%/}/console${NORMAL}"
        fi
    else
        echo "${GREEN}SUCCESS${NORMAL}"
    fi

    trap - INT
}

function createConfig() {
    echo "Please answer few questions:\n"
    read -p $'What is your Jenkins URL? (e.g. http://jenkins.org)\n' JENKINS_URL
    read -p "Username: " JENKINS_LOGIN
    read -p "Password: " -s JENKINS_PASSWORD
    echo "\nValidating..."

    JENKINS_CREDENTIALS="$JENKINS_LOGIN:$JENKINS_PASSWORD"
    set -x +e
    curl -v -s --user $JENKINS_CREDENTIALS "$JENKINS_URL/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)"
    RESULT=$?
    set +x -e
    if [ ! $RESULT = 0 ]; then
        echo "\n${RED}Oh no! Let's try again.${NORMAL}"
        createConfig
        return
    fi

    echo "${GREEN}Success!${NORMAL}"

    cat > $CONFIG <<-EOM
JENKINS_URL='$JENKINS_URL'
JENKINS_CREDENTIALS='$JENKINS_LOGIN:$JENKINS_PASSWORD'
EOM
    echo "${GREEN}Your config has been saved at $CONFIG${NORMAL}"
}

echo "Checking for update"
LATEST_VERSION=$(curl -s https://raw.githubusercontent.com/insanehunter/ci/master/latest-version)
if [ $VERSION != $LATEST_VERSION ]; then
    echo Update available.
    echo Updating to $LATEST_VERSION.
    if [ ! -x $(which brew) ]; then
        ""
        exit 1
    fi
    brew reinstall https://raw.githubusercontent.com/insanehunter/ci/master/formula/ci.rb
    ci $*
    exit
fi

if [ -f $CONFIG ]; then
    run $@
else
    echo "${YELLOW}No configuration file found at $CONFIG${NORMAL}"
    createConfig
fi
